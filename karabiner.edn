{;; Key modifier definitions (used throughout configuration)
 ;; !  = mandatory modifier (must be pressed)
 ;; #  = optional modifier (can be present or not)
 ;; C  = left_command   (‚åò)
 ;; T  = left_control   (‚åÉ)
 ;; O  = left_option    (‚å•)
 ;; S  = left_shift     (‚áß)
 ;; F  = fn             (Fn)
 ;; Q  = right_command  (right ‚åò)
 ;; W  = right_control  (right ‚åÉ)
 ;; E  = right_option   (right ‚å•)
 ;; R  = right_shift    (right ‚áß)
 ;; P  = caps_lock      (‚á™)
 ;; !! = Hyper key = Cmd+Ctrl+Opt+Shift (ü™Ñ)
 ;; ## = Any combination of modifiers (including none)

 :profiles {:KapsLite {:default true  ; Apply this profile by default
                       :sim     50    ; Simultaneous press threshold (ms): 
                                      ; Keys pressed within this window count as simultaneous
                       :delay   500   ; Delayed action threshold (ms):
                                      ; Waits this long before triggering held key actions
                       :alone   1000  ; Alone timeout (ms):
                                      ; If released within this time, triggers single tap action
                       :held    200}} ; Held down threshold (ms):
                                      ; Time needed to register as a key hold vs tap

 ; Threshold for detecting simultaneous layer activation (default: 250ms)
 :simlayer-threshold 50

 ; Application grouping using regex patterns for context-aware rules
 :applications {:terminals ["^com\\.apple\\.Terminal$"
                            "^com\\.googlecode\\.iterm2$"
                            "^com\\.jetbrains\\.(.*)$"]
                :vscode   ["^com\\.microsoft\\.VSCode$"]
                :ide      ["^com\\.jetbrains\\.(.*)$"
                           "^com\\.microsoft\\.VSCode$"]}

 ; MAIN KEY MAPPING CONFIGURATION :
 :main [;; ===== CapsLock Transformation ================================
        {:des "Transform CapsLock into Hyper key (Tap: Esc, Hold: CapsLock)"
         :rules [; Maps CapsLock to Hyper (right cmd/ctrl/opt + right shift)
                 ; When released quickly (< :alone timeout): triggers Esc key
                 ; When held (> :held timeout): activates CapsLock
                 [:##caps_lock :!QWEright_shift nil {:alone :caps_lock}]]}


        ;; ===== Cursor Movement Layer ================================
        {:des   "Hyper-based cursor movement"
         :rules [; Vim-style HJKL navigation
                 [:!QWERe :up_arrow]      ; Hyper + E ‚Üí ‚Üë
                 [:!QWERd :down_arrow]    ; Hyper + D ‚Üí ‚Üì
                 [:!QWERs :left_arrow]    ; Hyper + S ‚Üê 
                 [:!QWERf :right_arrow]   ; Hyper + F ‚Üí

                 ; Word navigation (add Control modifier)
                 [:!QWERCs :!Oleft_arrow]     ; Hyper+Ctrl+S ‚Üí ‚å•‚Üê (word left)
                 [:!QWERCf :!Oright_arrow]    ; Hyper+Ctrl+F ‚Üí ‚å•‚Üí (word right)

                 ; Line boundary navigation
                 [:!QWERa :!Cleft_arrow]      ; Hyper+A ‚Üí ‚åò‚Üê (start of line)
                 [:!QWERg :!Cright_arrow]     ; Hyper+G ‚Üí ‚åò‚Üí (end of line)

                 ; Hyper+Space ‚Üí Enter (confirm/execute)
                 [:!QWERspacebar :return_or_enter]

                 ; Terminal-specific home key (commented out)
                 ;[:!QWERp :!Cleft_arrow [:!terminals]]
                 ]}


        ;; ===== Text Selection Layer ================================
        {:des   "Shift-based text selection combinations"
         :rules [; Basic shift-selection (IJKL arrows)
                 [:!QWERi :!Sup_arrow]       ; Hyper+I ‚Üí ‚áß‚Üë (select up)
                 [:!QWERk :!Sdown_arrow]     ; Hyper+K ‚Üí ‚áß‚Üì (select down)
                 [:!QWERj :!Sleft_arrow]     ; Hyper+J ‚Üí ‚áß‚Üê (select left)
                 [:!QWERl :!Sright_arrow]    ; Hyper+L ‚Üí ‚áß‚Üí (select right)

                 ; Word selection
                 [:!QWERCj :!OSleft_arrow]   ; Hyper+Ctrl+J ‚Üí ‚å•‚áß‚Üê (select word left)
                 [:!QWERCl :!OSright_arrow]  ; Hyper+Ctrl+L ‚Üí ‚å•‚áß‚Üí (select word right)

                 ; Full-line selection
                 [:!QWERh :!SCleft_arrow]         ; Hyper+H ‚Üí ‚åò‚áß‚Üê (select to line start)
                 [:!QWERsemicolon :!SCright_arrow] ; Hyper+; ‚Üí ‚åò‚áß‚Üí (select to line end)
                 ]}


        ;; ===== Text Deletion Layer =================================
        {:des   "Intelligent text deletion macros"
         :rules [; Basic deletion
                 [:!QWERw :delete_or_backspace]  ; Hyper+W ‚Üí ‚å´ (delete left)
                 [:!QWERr :delete_forward]       ; Hyper+R ‚Üí ‚å¶ (delete right)

                 ; Word deletion
                 [:!QWERCw :!Odelete_or_backspace] ; Hyper+Ctrl+W ‚Üí ‚å•‚å´ (delete word left)
                 [:!QWERCr :!Odelete_forward]      ; Hyper+Ctrl+R ‚Üí ‚å•‚å¶ (delete word right)

                 ; Line-level deletion
                 [:!QWERdelete_or_backspace :!Cdelete_or_backspace]  ; Hyper+‚å´ ‚Üí ‚åò‚å´ (delete line)

                 ; Position-based deletion
                 [:!QWERopen_bracket [:!SCleft_arrow :delete_or_backspace]]  ; Hyper+[ ‚Üí ‚åò‚áß‚Üê + ‚å´
                 [:!QWERslash [:!SCright_arrow :delete_or_backspace]]        ; Hyper+/ ‚Üí ‚åò‚áß‚Üí + ‚å´
                 ]}]}