{;; Key modifier definitions (used throughout configuration)
 ;; !  = mandatory modifier (must be pressed)
 ;; #  = optional modifier (can be present or not)
 ;; C  = left_command   (‚åò)
 ;; T  = left_control   (‚åÉ)
 ;; O  = left_option    (‚å•)
 ;; S  = left_shift     (‚áß)
 ;; F  = fn             (Fn)
 ;; Q  = right_command  (right ‚åò)
 ;; W  = right_control  (right ‚åÉ)
 ;; E  = right_option   (right ‚å•)
 ;; R  = right_shift    (right ‚áß)
 ;; P  = caps_lock      (‚á™)
 ;; !! = Hyper key = right_command+right_control+right_option+right_shift (ü™Ñ)
 ;; ## = Any combination of modifiers (including none)

 :profiles {:KapsLite {;; "default true means" rules default goes into this rule if no profiles specified
                       :default true
                       ;; simultaneous key press threshold
                       ;; simlayer is implemented with to_if_alone and simultaneous key press feature
                       :sim     250
                       ;; to_delayed_action_delay_milliseconds
                       ;; checkout karabiner's documentation
                       ;; https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/to-delayed-action/
                       ;; basically it means time after which the key press is count delayed
                       :delay   500
                       ;; https://karabiner-elements.pqrs.org/docs/json/complex-modifications-manipulator-definition/to-if-alone/
                       ;; to_if_alone_timeout_milliseconds
                       ;; affects to_if_alone behavior
                       ;; simlayer is implemented with to_if_alone and simultaneous key press feature
                       :alone   1000
                       ;; to_if_held_down_threshold_milliseconds
                       ;; check the doc, I don't know what does this mean.
                       ;; maybe press this many milliseconds counts a "held" ?
                       :held    200}} ; to_if_held_down_threshold_milliseconds (default: 200)

 ; Threshold for detecting simultaneous layer activation (default: 250ms)
 :simlayer-threshold 250

 ; MAIN KEY MAPPING CONFIGURATION :
 :main [;; ===== CapsLock Transformation ================================
        {:des "Transform CapsLock into Hyper key"
         :rules [;
                 [:##caps_lock :!QWFright_shift nil {:alone :!Tspacebar}]]}

        ;; ===== Cursor Movement Layer ================================
        {:des   "Hyper-based cursor movement"
         :rules [; 
                 [:!QWERe :up_arrow]      ; Hyper + E ‚Üí ‚Üë
                 [:!QWERd :down_arrow]    ; Hyper + D ‚Üí ‚Üì
                 [:!QWERs :left_arrow]    ; Hyper + S ‚Üê 
                 [:!QWERf :right_arrow]   ; Hyper + F ‚Üí

                 ; Word navigation 
                 [:!QWERCs :!Oleft_arrow]     ; Hyper + Command + S ‚Üí ‚å•‚Üê (word left)
                 [:!QWERCf :!Oright_arrow]    ; Hyper + Command + F ‚Üí ‚å•‚Üí (word right)

                 ; Line boundary navigation
                 [:!QWERa :!Cleft_arrow]      ; Hyper + A ‚Üí ‚åò‚Üê (start of line)
                 [:!QWERg :!Cright_arrow]     ; Hyper + G ‚Üí ‚åò‚Üí (end of line)

                 ; Hyper + Space ‚Üí Enter
                 [:!QWERspacebar :return_or_enter]]}


        ;; ===== Text Selection Layer ================================
        {:des   "Shift-based text selection combinations"
         :rules [; Basic shift-selection (IJKL arrows)
                 [:!QWERi :!Sup_arrow]       ; Hyper + I ‚Üí ‚áß‚Üë (select up)
                 [:!QWERk :!Sdown_arrow]     ; Hyper + K ‚Üí ‚áß‚Üì (select down)
                 [:!QWERj :!Sleft_arrow]     ; Hyper + J ‚Üí ‚áß‚Üê (select left)
                 [:!QWERl :!Sright_arrow]    ; Hyper + L ‚Üí ‚áß‚Üí (select right)

                 ; Word selection
                 [:!QWERCj :!OSleft_arrow]   ; Hyper + Command + J ‚Üí ‚å•‚áß‚Üê (select word left)
                 [:!QWERCl :!OSright_arrow]  ; Hyper + Command + L ‚Üí ‚å•‚áß‚Üí (select word right)

                 ; Full-line selection
                 [:!QWERh :!SCleft_arrow]         ; Hyper + H ‚Üí ‚åò‚áß‚Üê (select to line start)
                 [:!QWERsemicolon :!SCright_arrow] ; Hyper + ; ‚Üí ‚åò‚áß‚Üí (select to line end)
                 ]}


        ;; ===== Text Deletion Layer =================================
        {:des   "Intelligent text deletion macros"
         :rules [; Basic deletion
                 [:!QWERw :delete_or_backspace]  ; Hyper + W ‚Üí ‚å´ (delete left)
                 [:!QWERr :delete_forward]       ; Hyper + R ‚Üí ‚å¶ (delete right)

                 ; Word deletion
                 [:!QWERCw :!Odelete_or_backspace] ; Hyper + Command + W ‚Üí ‚å•‚å´ (delete word left)
                 [:!QWERCr :!Odelete_forward]      ; Hyper + Command + R ‚Üí ‚å•‚å¶ (delete word right)
                 ; Line-level deletion
                 [:!QWERdelete_or_backspace :!Cdelete_or_backspace]  ; Hyper + ‚å´ ‚Üí ‚åò‚å´ (delete line)

                 ; Position-based deletion
                 [:!QWERopen_bracket [:!SCleft_arrow :delete_or_backspace]]  ; Hyper + [ ‚Üí ‚åò‚áß‚Üê + ‚å´
                 [:!QWERslash [:!SCright_arrow :delete_or_backspace]]        ; Hyper + / ‚Üí ‚åò‚áß‚Üí + ‚å´
                 ]}]}